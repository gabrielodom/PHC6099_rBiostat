{
  "hash": "b3adb0e03e09868cc3fc5461378bffe2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Rayshader Overview\"\nsubtitle: \"PHC 6099 - Summer 2023\"\nauthor: \"Kazi Tanvir Hasan\"\nformat: html\n---\n\n\n\n## Overview\n\n- R rayshader is an R package that allows users to generate high-quality 3D maps, visualizations, and animations.\n\n- rayshader also allows the user to translate ggplot2 objects into beautiful 3D data visualizations.\n\nTo install rayshader, you can use the following code in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(\n#   \"tylermorganwall/rayshader\"\n# )\n\n# remotes::install_cran(\"rayrender\") \n```\n:::\n\n\n\n## Functions\n\n- `rayshader` 0.35. 1 has 56 functions and 4 datasets\n\n- seven functions related to mapping \n\n- also has functions to add water and generate overlays\n\n- also included are functions to add additional effects and information to 3D visualizations\n\n- functions for converting rasters to matrices\n\n- functions to display and save your visualizations\n\n- rayshader has a function to generate 3D plots using ggplot2 objects\n\n\n## Example\n\nFirst we load all the required libraries. These libraries are required for \nvarious functions and operations used in creating 3D maps with rayshader.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rayshader)\nlibrary(rayrender) \nlibrary(reshape2)\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Example\n\nThen, we download and load the data \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here, I load a map with the raster package.\nloadzip <- tempfile() \n\ndownload.file(\"https://tylermw.com/data/dem_01.tif.zip\", loadzip)\n\nlocaltif <- raster::raster(\n  unzip(loadzip, \"dem_01.tif\")\n)\n\nunlink(loadzip)\n\n# write_rds(localtif, \"../data/01_rayshader_eg_20240503.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nIn this code snippet, we create a temporary file (loadzip) to store the downloaded zip file from the specified URL. The `download.file()` function is used to download the file, and `unzip()` is used to extract the \"dem_01.tif\" file from the downloaded zip. Finally, we load the raster data into the localtif object.\n\n## Create Map\n\nTo create a map first we need to convert this raster data file into a matrix \nusing `raster_to_matrix()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#And convert it to a matrix:\nelmat <- raster_to_matrix(localtif)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: raster\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'raster'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n\n\n:::\n:::\n\n\nThen we use `sphere_shade()` and  `plot_map()` to create our base map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelmat %>%\n  sphere_shade(texture = \"desert\") %>%\n  plot_map()\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nHere, elmat is a matrix created from the raster data using the `raster_to_matrix()` function. `sphere_shade()` applies shading to the elevation matrix, giving it a 3D effect. The texture parameter specifies the type of texture to be applied. In this case, it uses the \"desert\" texture. Finally, `plot_map()` is used to display the shaded map.\n\n\n## Add Water Layer\n\nWe can add a water layer to the map using `detect_water()` and `add_water()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# detect_water and add_water adds a water layer to the map:\nelmat %>%\n  sphere_shade(texture = \"desert\") %>%\n  add_water(detect_water(elmat), color = \"desert\") %>%\n  plot_map()\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nIn this code snippet, detect_water() function detects water areas in the elevation matrix. Then, `add_water()` adds a water layer to the map using the detected water areas. The color parameter specifies the color of the water. Finally, `plot_map()` is used to display the map with the water layer.\n\n\n## Add Shadow Layer\n\nWe can also add shadow layer in the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# And here we add an ambient occlusion shadow layer, which models lighting\n#   from atmospheric scattering:\n\nelmat %>%\n  sphere_shade(texture = \"desert\") %>%\n  add_water(detect_water(elmat), color = \"desert\") %>%\n  add_shadow(ray_shade(elmat), 0.5) %>%\n  add_shadow(ambient_shade(elmat), 0) %>%\n  plot_map()\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHere, `add_shadow()` is used to add a shadow layer to the map. `ray_shade()` calculates shadows based on the elevation matrix (elmat). The zscale parameter controls the strength of the shadows. `ambient_shade()` generates ambient lighting for the map. The second parameter of add_shadow() specifies the opacity of the shadows. Finally, `plot_map()` displays the map with shadows.\n\n\n## Convert to 3D\n\nWe can convert this 2D map into 3D mapping using `plot_3d()` (by passing a texture map into the plot_3d function)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelmat %>%\n  sphere_shade(texture = \"desert\") %>%\n  add_water(detect_water(elmat), color = \"desert\") %>%\n  add_shadow(ray_shade(elmat, zscale = 3), 0.5) %>%\n  add_shadow(ambient_shade(elmat), 0) %>%\n  plot_3d(\n    elmat, zscale = 10, fov = 0, theta = 135,\n    zoom = 0.75, phi = 45, windowsize = c(1000, 800)\n  )\nSys.sleep(0.2)\nrender_snapshot()\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can add a scale bar, as well as a compass using `render_scalebar()` and `render_compass()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_camera(fov = 0, theta = 60, zoom = 0.75, phi = 45)\nrender_scalebar(\n  limits = c(0, 5, 10),\n  label_unit = \"km\",\n  position = \"W\",\n  y = 50,\n  scale_length = c(0.33,1)\n)\nrender_compass(position = \"E\")\nrender_snapshot(clear = TRUE)\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nHere, `render_camera()` sets the camera properties for the 3D map. `render_scalebar()` adds a scale bar to the map. The limits parameter specifies the limits of the scale bar, label_unit provides the label for the scale, position sets the position of the scale bar, y controls the vertical position, and scale_length determines the length of the scale bar. `render_compass()` adds a compass to the map, and `render_snapshot()` captures the final image of the map.\n\n\n## 3D plotting with `rayshader` and `ggplot2`\n\nRayshader can also be used to make 3D plots out of ggplot2 objects using the `plot_gg()` function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiamonds = ggplot(diamonds) +\n  stat_density_2d(\n    aes(\n      x = x, y = depth, fill = stat(nlevel)\n    ), \n    geom = \"polygon\", n = 200, bins = 50,contour = TRUE\n  ) +\n  facet_wrap(clarity~.) +\n  scale_fill_viridis_c(option = \"A\")\n\npar(mfrow = c(1, 2))\n\nplot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `stat(nlevel)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(nlevel)` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_gg(\n  ggdiamonds, \n  width = 5, \n  height = 5, \n  multicore = TRUE, \n  scale = 250, \n  zoom = 0.7, \n  theta = 10, \n  phi = 30, \n  windowsize = c(800, 800)\n)\nSys.sleep(0.2)\nrender_snapshot(clear = TRUE)\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n:::\n\n\n\n## Contour Plot \n\nRayshader will automatically ignore lines and other elements that should not be mapped to 3D.\n\nHere’s a contour plot of the volcano dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Contours and other lines will automatically be ignored. Here is the volcano\n#   dataset:\n\nggvolcano <- volcano %>% \n  melt() %>%\n  ggplot() +\n  geom_tile(aes(x = Var1, y = Var2, fill = value)) +\n  geom_contour(aes(x = Var1, y = Var2, z = value), color = \"black\") +\n  scale_x_continuous(\"X\", expand = c(0, 0)) +\n  scale_y_continuous(\"Y\", expand = c(0, 0)) +\n  scale_fill_gradientn(\"Z\", colours = terrain.colors(10)) +\n  coord_fixed()\n\npar(mfrow = c(1, 2))\nplot_gg(ggvolcano, width = 7, height = 4, raytrace = FALSE, preview = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1861 rows containing missing values or values outside the scale range\n(`geom_contour()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_gg(\n  ggvolcano,\n  multicore = TRUE, \n  raytrace = TRUE, \n  width = 7, \n  height = 4, \n  scale = 300, \n  windowsize = c(1400, 866), \n  zoom = 0.6, \n  phi = 30, \n  theta = 30\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1861 rows containing missing values or values outside the scale range\n(`geom_contour()`).\n```\n\n\n:::\n\n```{.r .cell-code}\nSys.sleep(0.2)\n\nrender_snapshot(clear = TRUE)\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n## `mtcars` Data Example\n\nRayshader also detects when the user passes the `color` aesthetic, and maps those values to 3D\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtplot = ggplot(mtcars) + \n  geom_point(\n    aes(x = mpg, y = disp, color = cyl)\n  ) + \n  scale_color_continuous(limits = c(0, 8))\n\npar(mfrow = c(1, 2))\nplot_gg(mtplot, width = 3.5, raytrace = FALSE, preview = TRUE)\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_gg(mtplot)\nSys.sleep(0.2)\nrender_snapshot(clear = TRUE)\n```\n\n::: {.cell-output-display}\n![](01_rayshader_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n\n## Reference\n\n- <https://www.rayshader.com/>\n\n- <https://www.youtube.com/watch?v=zgFXVhmKNbU>\n",
    "supporting": [
      "01_rayshader_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}